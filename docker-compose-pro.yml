version: "3"

services:
  web:
    build:
      context: .
      dockerfile: dockerfilepro
    container_name: livflow
    command: >
      bash -c "python manage.py collectstatic --no-input &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./django:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - ./staticfiles:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - app-network
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db  # PostgreSQL 컨테이너의 서비스 이름과 동일해야 함
      - DB_PORT=5432
      - DEBUG=0
      - DJANGO_SETTINGS_MODULE=livflow.settings.product

  nginx:
    image: nginx:alpine
    container_name: ng01
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt
      - /etc/letsencrypt/live/api.dogandbaby.co.kr/fullchain.pem:/etc/letsencrypt/live/api.dogandbaby.co.kr/fullchain.pem
      - ./data/certbot/www:/var/www/certbot
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  db:
    image: postgres:latest
    container_name: db01
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # 외부 접속을 허용하지 않으려면 이 줄을 생략해도 됩니다.
    networks:
      - app-network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
